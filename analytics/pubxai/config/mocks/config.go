// Code generated by MockGen. DO NOT EDIT.
// Source: ./analytics/pubxai/config/config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/prebid/prebid-server/v2/analytics/pubxai/config"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// IsSameAs mocks base method.
func (m *MockConfigService) IsSameAs(a, b *config.Configuration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSameAs", a, b)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSameAs indicates an expected call of IsSameAs.
func (mr *MockConfigServiceMockRecorder) IsSameAs(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSameAs", reflect.TypeOf((*MockConfigService)(nil).IsSameAs), a, b)
}

// Start mocks base method.
func (m *MockConfigService) Start(stop <-chan struct{}) <-chan *config.Configuration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", stop)
	ret0, _ := ret[0].(<-chan *config.Configuration)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConfigServiceMockRecorder) Start(stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConfigService)(nil).Start), stop)
}
