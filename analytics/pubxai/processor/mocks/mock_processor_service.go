// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prebid/prebid-server/v2/analytics/pubxai/processor (interfaces: ProcessorService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openrtb2 "github.com/prebid/openrtb/v20/openrtb2"
	utils "github.com/prebid/prebid-server/v2/analytics/pubxai/utils"
)

// MockProcessorService is a mock of ProcessorService interface.
type MockProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorServiceMockRecorder
}

// MockProcessorServiceMockRecorder is the mock recorder for MockProcessorService.
type MockProcessorServiceMockRecorder struct {
	mock *MockProcessorService
}

// NewMockProcessorService creates a new mock instance.
func NewMockProcessorService(ctrl *gomock.Controller) *MockProcessorService {
	mock := &MockProcessorService{ctrl: ctrl}
	mock.recorder = &MockProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorService) EXPECT() *MockProcessorServiceMockRecorder {
	return m.recorder
}

// ProcessBidData mocks base method.
func (m *MockProcessorService) ProcessBidData(arg0 []map[string]interface{}, arg1 map[string]openrtb2.Imp, arg2 *utils.LogObject) (*utils.AuctionBids, []utils.WinningBid) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBidData", arg0, arg1, arg2)
	ret0, _ := ret[0].(*utils.AuctionBids)
	ret1, _ := ret[1].([]utils.WinningBid)
	return ret0, ret1
}

// ProcessBidData indicates an expected call of ProcessBidData.
func (mr *MockProcessorServiceMockRecorder) ProcessBidData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBidData", reflect.TypeOf((*MockProcessorService)(nil).ProcessBidData), arg0, arg1, arg2)
}

// ProcessLogData mocks base method.
func (m *MockProcessorService) ProcessLogData(arg0 *utils.LogObject) (*utils.AuctionBids, []utils.WinningBid) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLogData", arg0)
	ret0, _ := ret[0].(*utils.AuctionBids)
	ret1, _ := ret[1].([]utils.WinningBid)
	return ret0, ret1
}

// ProcessLogData indicates an expected call of ProcessLogData.
func (mr *MockProcessorServiceMockRecorder) ProcessLogData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLogData", reflect.TypeOf((*MockProcessorService)(nil).ProcessLogData), arg0)
}
