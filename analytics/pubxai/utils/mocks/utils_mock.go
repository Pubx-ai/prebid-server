// Code generated by MockGen. DO NOT EDIT.
// Source: ./analytics/pubxai/utils/utils.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openrtb2 "github.com/prebid/openrtb/v20/openrtb2"
	utils "github.com/prebid/prebid-server/v2/analytics/pubxai/utils"
)

// MockUtilsService is a mock of UtilsService interface.
type MockUtilsService struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsServiceMockRecorder
}

// MockUtilsServiceMockRecorder is the mock recorder for MockUtilsService.
type MockUtilsServiceMockRecorder struct {
	mock *MockUtilsService
}

// NewMockUtilsService creates a new mock instance.
func NewMockUtilsService(ctrl *gomock.Controller) *MockUtilsService {
	mock := &MockUtilsService{ctrl: ctrl}
	mock.recorder = &MockUtilsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilsService) EXPECT() *MockUtilsServiceMockRecorder {
	return m.recorder
}

// ExtractAdunitCodes mocks base method.
func (m *MockUtilsService) ExtractAdunitCodes(requestExt map[string]interface{}) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractAdunitCodes", requestExt)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ExtractAdunitCodes indicates an expected call of ExtractAdunitCodes.
func (mr *MockUtilsServiceMockRecorder) ExtractAdunitCodes(requestExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractAdunitCodes", reflect.TypeOf((*MockUtilsService)(nil).ExtractAdunitCodes), requestExt)
}

// ExtractConsentTypes mocks base method.
func (m *MockUtilsService) ExtractConsentTypes(requestExt map[string]interface{}) utils.ConsentDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractConsentTypes", requestExt)
	ret0, _ := ret[0].(utils.ConsentDetail)
	return ret0
}

// ExtractConsentTypes indicates an expected call of ExtractConsentTypes.
func (mr *MockUtilsServiceMockRecorder) ExtractConsentTypes(requestExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractConsentTypes", reflect.TypeOf((*MockUtilsService)(nil).ExtractConsentTypes), requestExt)
}

// ExtractDeviceData mocks base method.
func (m *MockUtilsService) ExtractDeviceData(requestExt map[string]interface{}) utils.DeviceDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractDeviceData", requestExt)
	ret0, _ := ret[0].(utils.DeviceDetail)
	return ret0
}

// ExtractDeviceData indicates an expected call of ExtractDeviceData.
func (mr *MockUtilsServiceMockRecorder) ExtractDeviceData(requestExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractDeviceData", reflect.TypeOf((*MockUtilsService)(nil).ExtractDeviceData), requestExt)
}

// ExtractFloorData mocks base method.
func (m *MockUtilsService) ExtractFloorData(requestExt, bidResponse map[string]interface{}) utils.FloorDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFloorData", requestExt, bidResponse)
	ret0, _ := ret[0].(utils.FloorDetail)
	return ret0
}

// ExtractFloorData indicates an expected call of ExtractFloorData.
func (mr *MockUtilsServiceMockRecorder) ExtractFloorData(requestExt, bidResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFloorData", reflect.TypeOf((*MockUtilsService)(nil).ExtractFloorData), requestExt, bidResponse)
}

// ExtractPageData mocks base method.
func (m *MockUtilsService) ExtractPageData(requestExt map[string]interface{}) utils.PageDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractPageData", requestExt)
	ret0, _ := ret[0].(utils.PageDetail)
	return ret0
}

// ExtractPageData indicates an expected call of ExtractPageData.
func (mr *MockUtilsServiceMockRecorder) ExtractPageData(requestExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractPageData", reflect.TypeOf((*MockUtilsService)(nil).ExtractPageData), requestExt)
}

// ExtractUserIds mocks base method.
func (m *MockUtilsService) ExtractUserIds(requestExt map[string]interface{}) utils.UserDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUserIds", requestExt)
	ret0, _ := ret[0].(utils.UserDetail)
	return ret0
}

// ExtractUserIds indicates an expected call of ExtractUserIds.
func (mr *MockUtilsServiceMockRecorder) ExtractUserIds(requestExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUserIds", reflect.TypeOf((*MockUtilsService)(nil).ExtractUserIds), requestExt)
}

// ProcessBidResponses mocks base method.
func (m *MockUtilsService) ProcessBidResponses(bidResponses []map[string]interface{}, auctionId string, startTime int64, requestExt, responseExt map[string]interface{}, floorDetail utils.FloorDetail) ([]utils.Bid, []utils.Bid) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBidResponses", bidResponses, auctionId, startTime, requestExt, responseExt, floorDetail)
	ret0, _ := ret[0].([]utils.Bid)
	ret1, _ := ret[1].([]utils.Bid)
	return ret0, ret1
}

// ProcessBidResponses indicates an expected call of ProcessBidResponses.
func (mr *MockUtilsServiceMockRecorder) ProcessBidResponses(bidResponses, auctionId, startTime, requestExt, responseExt, floorDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBidResponses", reflect.TypeOf((*MockUtilsService)(nil).ProcessBidResponses), bidResponses, auctionId, startTime, requestExt, responseExt, floorDetail)
}

// UnmarshalExtensions mocks base method.
func (m *MockUtilsService) UnmarshalExtensions(ao *utils.LogObject) (map[string]interface{}, map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalExtensions", ao)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UnmarshalExtensions indicates an expected call of UnmarshalExtensions.
func (mr *MockUtilsServiceMockRecorder) UnmarshalExtensions(ao interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalExtensions", reflect.TypeOf((*MockUtilsService)(nil).UnmarshalExtensions), ao)
}

// createBidObject mocks base method.
func (m *MockUtilsService) createBidObject(bid openrtb2.Bid, bidExt map[string]interface{}, imp openrtb2.Imp, impExt map[string]interface{}, auctionId, bidderName string, bidderInfo map[string]interface{}, startTime int64, bidderResponsetime float64, floorDetail utils.FloorDetail) utils.Bid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createBidObject", bid, bidExt, imp, impExt, auctionId, bidderName, bidderInfo, startTime, bidderResponsetime, floorDetail)
	ret0, _ := ret[0].(utils.Bid)
	return ret0
}

// createBidObject indicates an expected call of createBidObject.
func (mr *MockUtilsServiceMockRecorder) createBidObject(bid, bidExt, imp, impExt, auctionId, bidderName, bidderInfo, startTime, bidderResponsetime, floorDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createBidObject", reflect.TypeOf((*MockUtilsService)(nil).createBidObject), bid, bidExt, imp, impExt, auctionId, bidderName, bidderInfo, startTime, bidderResponsetime, floorDetail)
}

// createWinningBidObject mocks base method.
func (m *MockUtilsService) createWinningBidObject(bidObj utils.Bid, impExt, bidExt map[string]interface{}, bidderName string, floorDetail utils.FloorDetail) utils.Bid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createWinningBidObject", bidObj, impExt, bidExt, bidderName, floorDetail)
	ret0, _ := ret[0].(utils.Bid)
	return ret0
}

// createWinningBidObject indicates an expected call of createWinningBidObject.
func (mr *MockUtilsServiceMockRecorder) createWinningBidObject(bidObj, impExt, bidExt, bidderName, floorDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createWinningBidObject", reflect.TypeOf((*MockUtilsService)(nil).createWinningBidObject), bidObj, impExt, bidExt, bidderName, floorDetail)
}

// isWinningBid mocks base method.
func (m *MockUtilsService) isWinningBid(bidderName string, bidExt map[string]interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isWinningBid", bidderName, bidExt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isWinningBid indicates an expected call of isWinningBid.
func (mr *MockUtilsServiceMockRecorder) isWinningBid(bidderName, bidExt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWinningBid", reflect.TypeOf((*MockUtilsService)(nil).isWinningBid), bidderName, bidExt)
}

// unmarshalBidAndImpExt mocks base method.
func (m *MockUtilsService) unmarshalBidAndImpExt(bid openrtb2.Bid, imp openrtb2.Imp) (map[string]interface{}, map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "unmarshalBidAndImpExt", bid, imp)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// unmarshalBidAndImpExt indicates an expected call of unmarshalBidAndImpExt.
func (mr *MockUtilsServiceMockRecorder) unmarshalBidAndImpExt(bid, imp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unmarshalBidAndImpExt", reflect.TypeOf((*MockUtilsService)(nil).unmarshalBidAndImpExt), bid, imp)
}
